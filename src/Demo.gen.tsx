/* TypeScript file generated by genType. */

const $$toRE991953109 = {"Teacher": 0, "Director": 1};

// tslint:disable-next-line:no-var-requires
const CreateBucklescriptBlock = require('bs-platform/lib/js/block.js');

// tslint:disable-next-line:no-var-requires
const DemoBS = require('./Demo.bs');

// tslint:disable-next-line:interface-over-type-literal
export type schoolPerson = 
  | "Teacher"
  | "Director"
  | { tag: "Student"; value: string };

// tslint:disable-next-line:interface-over-type-literal
export type operation = 
  | { tag: "Add"; value: [operation, operation] }
  | { tag: "Sum"; value: [operation, operation] }
  | { tag: "Int"; value: number };

export const greeting: (_1:schoolPerson) => string = function _(Arg1: any) {
  const result = DemoBS.greeting(typeof(Arg1) === 'object'
    ? CreateBucklescriptBlock.__(0, [Arg1.value])
    : $$toRE991953109[Arg1]);
  return result
};

export const calc: (_1:operation) => number = function _(Arg1: any) {
  const result = 
/* WARNING: circular type operation. Only shallow converter applied. */
  DemoBS.calc(Arg1.tag==="Add"
    ? CreateBucklescriptBlock.__(0, Arg1.value)
    : Arg1.tag==="Sum"
    ? CreateBucklescriptBlock.__(1, Arg1.value)
    : CreateBucklescriptBlock.__(2, [Arg1.value]));
  return result
};
